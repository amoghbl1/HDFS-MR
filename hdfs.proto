syntax = "proto2";

option java_outer_classname = "HDFSProtos";
option java_package = "com.distributed.systems";

message OpenFileRequest {
  optional string fileName = 1; // fileName
  optional bool forRead = 2; // true, for read; false for write
}

message OpenFileResponse {
  optional int32 status = 1; // result of the call
  optional string rendezvousIndentifier = 2;
  //optional int32 handle = 2; // file handle. Use this to close file on write
// for read, the numbers for the various blocks. Not populated in write mode
  //repeated int32 blockNums = 3;  
}

message CloseFileRequest {
  optional int32 handle = 1; // obtained from OpenFile
}

message CloseFileResponse {
  optional int32 status = 1;
}

message WriteBlockRequest {
  optional int32 blockNumber = 1;
  repeated bytes data = 2;
  repeated string remainingDataNodeIPs = 3;
}

message WriteBlockResponse {
  optional int32 status = 1;
}

message BlockLocationRequest {
  repeated int32 blockNums = 1;
}

message BlockLocationResponse {
  optional int32 status = 1;
  // repeated BlockLocations blockLocations = 2;
}


message AssignBlockResponse {
  optional int32 status = 1;
  optional int32 blockNumber = 2;
  // These Data Node IPs are used to 
  // write block on the first IP
  // and relying on that to write to the second
  // data node, and hence redundancy
  repeated string dataNodeIPs = 3;
  // optional BlockLocations newBlock = 2;
}

message ListFilesRequest {
  optional string dirName = 1; // unused, place holder to support mkdir, etc
}

message ListFilesResponse {
  optional int32 status = 1;
  repeated string fileNames = 2;
}

message ReadBlockRequest {
  optional int32 blockNumber = 1;
}

message ReadBlockResponse {
  optional int32 status = 1;
  // repeated bytes data = 2;
}

message BlockReportRequest {
  optional int32 id = 1; // identity of the DN. All communication to the NN uses the same id
  optional DataNodeReportMapping mappings = 2;
}

message BlockReportResponse {
  repeated int32 status = 1;
}

message HeartBeatRequest {
  optional int32 id = 1;
  optional string ip = 2;
}

message HeartBeatResponse {
  optional int32 status = 1;
}

// My files and what kind of data is in them is defined here

// Data Node Block Mappings
// Mappings of block numbers to local location on DN

message DataNodeBlockMappings {
    repeated DataNodeBlockMapping mappings = 1;
}

message DataNodeBlockMapping {
    optional int32 blockNumber = 1;
    optional string localPath = 2;
}

// Name Node File Mappings 
// Mappings of Files to Block Numbers

message NameNodeFileMappings {
    repeated NameNodeFileMapping mappings = 1;
}

message NameNodeFileMapping {
    optional string fileName = 1;
    repeated int32 blockNumbers = 2;
}

// Data Node Report Mappings
// Mappings of Data Nodes to the blocks
// that are stored on that Data Node

message DataNodeReportMappings {
    repeated DataNodeReportMapping mappings = 1;
}

message DataNodeReportMapping {
    optional string dataNodeIP = 1;
    optional int32 blockNumber = 2;
}

// Name Node Block Data Node Mappings
// Mappings of Blocks to Data Nodes
// This is extra book-keeping for speed purposes
message NameNodeBlockDataNodeMappings {
    repeated NameNodeBlockDataNodeMapping mappings = 1;
}

message NameNodeBlockDataNodeMapping {
    optional int32 blockNumber = 1;
    repeated string dataNodeIPs = 2;
}

message NameNodeBlockDataNodeMappingsRequest {
    optional string fileName = 1;
}

message NameNodeBlockDataNodeMappingsResponse {
    repeated NameNodeBlockDataNodeMapping mappings = 1;
}
